users[icon: user, color: blue] {
  id string pk
  Name string
  email string
  password string
  phone string
  AvtarId string
  Role enum('Student', 'Teacher', 'Admin')
  gender string
  SchoolId string
  SignAccessToken string
  SignRefreshToken string
}

Avtar[icon: users] {
  AvtarId string pk
  ImgUrl string
}

School[icon: school, color: green] {
  schoolId string pk
  type string
  BoardCode string
  RegNo string
  foundedYear date
  email string
  phone string
  address object
  AcademicYear string
  Standard JSON         // List of grade levels stored as JSON
  Plan object
  status object
  ActiveUser object
  logo url
  timestamp date
}

Subject[icon: book, color: purple] {
  SubjectId string pk      // Unique identifier for the subject
  SchoolId string          // Identifies the school offering the subject
  Name string              // e.g., Mathematics, Science, English
  Code string              // e.g., MAT101, SCI102
  Description string?      // Optional overview
}

Student[icon: pen-tool, color: orange] {
  Id string pk             // References users.id
  Class_id string          // Identifies the class the student belongs to
  Roll_no number
  PersonalInfo PersonalInfo
  Attendance Attendance
  ActivityTracker Activity
}

PersonalInfo[icon: info, color: purple] {
  StudentId string pk      // References Student.Id
  SchoolIdCard object
  ParentsDetail ParentsDetail
  Height string
  Weight string
  BloodGroup string
}

Attendance[icon: pencil, color: red] {
  UserId string pk         // Represents Student.Id or Teacher.Id
  Daily boolean
  Weekly number
  Monthly number
  Yearly number
}

Activity[icon: activity, color: yellow] {
  StudentId string pk      // References Student.Id
  QuizStatus boolean
  Points number
  Streak number
}

Teacher[icon: worker, color: gray] {
  Id string pk             // References users.id
  JoiningDate date
  EmploymentType enum('Fulltime','Parttime','Contract')
  ExperienceYear number
  IsActive boolean
  Subjects JSON            // Array of subject codes/names stored as JSON
  GradesAssigned JSON      // Array of grade levels stored as JSON
  IsClassteacher boolean
  AssignedClassesID string | null   // Identifies the designated class, if any
  Attendance Attendance
  WeeklySchedule object
  TeacherPerformance TeacherPerformance
}

TeacherPerformance[icon: gcp-performance-dashboard, color: green] {
  TeacherId string pk      // References Teacher.Id
  StudentPassed number
  ClassAvgScore number
  ParentsFeedback Feedback
  Achievements JSON        // Array of achievement details stored as JSON
}

Achievements[icon: award, color: blue] {
  TeacherId string          // References Teacher.Id
  Title string
  AchievementDate date
  Description string
}

Feedback[icon: message-circle, color: red] {
  TeacherId string pk      // References Teacher.Id
  AvgRating number
  Feedbacks JSON           // Array of feedback objects stored as JSON
}

Form[icon: form, color: orange] {
  FormId string pk
  FormType enum('Lecture Feedback','Student Feedback','Parent Feedback')
  FilledBy enum('Student','Teacher','Parent')
  StudentId string         // References Student.Id
  TeacherId string         // References Teacher.Id
  SubmissionDate date
}

LectFeedbackForm[icon: message-square, color: blue] {
  FormId string           // References Form.FormId
  LectureId string
  Rating LectRating
}

LectRating[icon: message-circle, color: yellow] {
  FormId string pk        // References LectFeedbackForm.FormId
  AverageRating JSON       // Detailed ratings stored as JSON
  RatingByStudent JSON     // Array of student ratings stored as JSON
}

LectRatingType[icon: message-circle, color: red] {
  LectRatingId string pk    // References LectRating.FormId
  ContentClarity number
  EngagementLevel number
  LecturePace number
  ContentRelevance number
  Comment? string
}

StudentForm[icon: form, color: green] {
  FormId string           // References Form.FormId
  Rating StudRating
}

StudRating[icon: messenger, color: red] {
  FormId string pk        // References StudentForm.FormId
  AverageRating JSON       // Ratings stored as JSON
  RatingByStudent JSON     // Array of rating details stored as JSON
}

StudRatingtype[icon: message-circle, color: purple] {
  StudRatingId string pk    // References StudRating.FormId
  CommunicationSkills number
  Approachability number
  TeachingEffectiveness number
  Comment? string
}

ParentsForm[icon: message-circle, color: red] {
  FormId string           // References Form.FormId
  Rating ParentRating
}

ParentRating[icon: messenger, color: blue] {
  FormId string pk        // References ParentsForm.FormId
  AverageRating JSON       // Ratings stored as JSON
  ParentRating JSON        // Array of detailed ratings stored as JSON
}

ParentRatingType[icon: message-circle, color: purple] {
  ParentRatingId string pk  // References ParentRating.FormId
  ChildImprovement number
  TeachersGuidance number
  CommunicationParents number
  ProfessionalismBehavior number
  MotivationToStudents number
  comments? string
}

Class[icon: office, color: blue] {
  ClassId string pk
  SchoolId string          // Identifies the school
  Standard number
  Section string?          // Optional (e.g., "A", "B")
  classteacher string      // Identifies the class teacher (Teacher.Id)
  SubTeachers JSON         // Array of Teacher IDs stored as JSON
  Subjects JSON            // Array of Subject IDs stored as JSON
}

Lecture[icon: pencil, color: red] {
  LectureId string pk
  teacher string           // References Teacher.Id
  Subject string           // Ideally references Subject.SubjectId
  LectureTitle string
  Duration number          // In minutes
  Description string
  VideoURL string
  LectureFeedback string   // References Form.FormId (feedback form for the lecture)
}
Assignment[icon: question, color: green] {
  AssignmentId string pk
  TeacherId string         // References Teacher.Id
  SubjectId string         // References Subject.SubjectId
  ClassId string           // References Class.ClassId
  CreatedAt date
  DueDate date
  Duration number
  Topics JSON              // Array of topics stored as JSON
  Description string
  Title string
  AttachmentUrl string?    // Optional supporting file/resource URL
  TotalMarks number
}

AssignmentQuestionSelection[icon: question, color: blue] {
  SelectionId string pk
  AssignmentId string  
  QuestionId string 
  CustomMarks number 
}

AssignmentSubmission[icon: question, color: green] {
  SubmissionId string pk
  AssignmentId string  
  StudentId string 
  TotalMarksObtained number
  SubmissionDate date
}


QuesBank[icon: question, color: blue] {
  QuesId string pk
  Topic string
  DifficultyEnum enum('Easy','Medium','Hard')
  Questiontxt string
  QuestionEnum enum('MCQ','Subjective')
  Marks number
}

Quiz[icon: question, color: yellow] {
  QuizId string pk
  CreatorId string         // References users.id (Teacher or Student)
  CreatedAt date
  Duration number
  ModeEnum enum('SelfAssessment','Custom','Manual')
  DiffLevel enum('Easy','Medium','Hard')
  Topics JSON              // Array of topics stored as JSON
  Description string
  Title string
}

QuizQuestionSelection[icon: question, color: blue] {
  SelectionId string pk
  QuizId string            // References Quiz.QuizId
  QuestionId string        // References QuesBank.QuesId
  CustomMarks number
  MarksObtanied number
}

QuizAttempt[icon: question, color: green] {
  AttemptId string pk
  QuizId string            // References Quiz.QuizId
  StudentId string         // References Student.Id
  MarksObtained number
  AttemptDate date
}

Notification[icon: message-circle, color: red] {
  NotificationId string pk
  ClassId string           // References Class.ClassId (optional, if applicable)
  Message string
  TypeEnum enum('Quiz','DoubtResolution','Assignment','DailyLogin','Question','General')
  TimeStamp date
  ReadStatus boolean
  ExtraData JSON?          // Optional additional metadata (e.g., AssignmentId, QuestionId, etc.)
}


Event[icon: activity, color: purple] {
  EventId string pk
  SchoolId string          // References School.schoolId
  Title string
  Description string
  StartDate date
  EndDate date
  Location string
  EventType string
  CreatedBy string         // References users.id
  CreatedAt date
  Poster url
}

users.AvtarId - Avtar.AvtarId
users.SchoolId - School.schoolId

Student.Id - users.id
PersonalInfo.StudentId - Student.Id
Attendance.UserId - Student.Id
Attendance.UserId - Teacher.Id
Activity.StudentId - Student.Id

Teacher.Id - users.id
Teacher.AssignedClassesID - Class.ClassId
Teacher.Attendance - Attendance.UserId
Teacher.TeacherPerformance - TeacherPerformance.TeacherId

TeacherPerformance.TeacherId - Teacher.Id
Achievements.TeacherId - Teacher.Id
Feedback.TeacherId - Teacher.Id

Form.StudentId - Student.Id
Form.TeacherId - Teacher.Id

LectFeedbackForm.FormId - Form.FormId
LectRating.FormId - LectFeedbackForm.FormId
LectRatingType.LectRatingId - LectRating.FormId

StudentForm.FormId - Form.FormId
StudRating.FormId - StudentForm.FormId
StudRatingtype.StudRatingId - StudRating.FormId

ParentsForm.FormId - Form.FormId
ParentRating.FormId - ParentsForm.FormId
ParentRatingType.ParentRatingId - ParentRating.FormId

Class.SchoolId - School.schoolId
Class.classteacher - Teacher.Id
Class.ClassId - Student.Class_id

Lecture.teacher - Teacher.Id
Lecture.Subject - Subject.SubjectId

Option.QuestionId - Question.QuestionId

QuesBank - is the independent question bank repository
QuesBank.QuesId - used by QuizQuestionSelection.QuestionId

Quiz.CreatorId - users.id
QuizQuestionSelection.QuizId - Quiz.QuizId
QuizQuestionSelection.QuestionId - QuesBank.QuesId
QuizAttempt.QuizId - Quiz.QuizId
QuizAttempt.StudentId - Student.Id

Notification.ClassId - Class.ClassId

Event.SchoolId - School.schoolId
Event.CreatedBy - users.id

Assignment.TeacherId - Teacher.Id
Assignment.SubjectId - Subject.SubjectId
Assignment.ClassId   - Class.ClassId

AssignmentQuestionSelection.AssignmentId - Assignment.AssignmentId
AssignmentQuestionSelection.QuestionId   - QuesBank.QuesId


AssignmentSubmission.AssignmentId - Assignment.AssignmentId
AssignmentSubmission.StudentId  - Student.Id
